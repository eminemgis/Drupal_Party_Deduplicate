<?php

/**
 * Implements hook_form_FORM_ID_alter().
 */
function party_unique_form_party_primary_fields_edit_field_alter(&$form, &$form_state) {
  if ($form['#target'] == 'email' && isset($form['options'])) {
    if (!isset($form['options'])) {
      $form['options'] = array(
        '#type' => 'fieldset',
        '#title' => t('Settings'),
      );
    }
    $form['options']['party_unique'] = array(
      '#type' => 'checkbox',
      '#title' => t('Merge Parties with the same email'),
      '#description' => t('If another Party with the same email address already exists datasets will be attached to existing Party instead of creation duplicate.'),
      '#default_value' => variable_get('party_unique_email', FALSE),
    );
  }
  $form['#submit'][] = 'party_unique_form_party_primary_fields_edit_field_submit';
}

/**
 * Form submitter for 'party_primary_fields_edit_field' form.
 */
function party_unique_form_party_primary_fields_edit_field_submit($form, &$form_state) {
  if ($form['#target'] == 'email') {
    variable_set('party_unique_email', (bool) $form_state['values']['party_unique']);
    variable_set('party_unique_email_sources', array_keys($form_state['values']['sources']));
  }
}

/**
 * Implements hook_party_primary_fields_alter().
 */
function party_unique_party_primary_fields_alter(Party $party, &$needs_store) {
	$merge_parties = variable_get('party_unique_email', FALSE);
  if (!empty($party->email) && $merge_parties) {
    $query = party_query();
    $query->fields('party');
    $query->range(0, 1);
    $query->condition('email', $party->email);

		// If already merged
		$query->condition('merged_party', 0);
    if ($match = $query->execute()->fetchAssoc()) {
      $exparty_pid = $match['pid'];
      $extparty = party_load($exparty_pid);
			if($party->pid != $extparty->pid){
				$party = party_unique_merge($extparty, $party);
				//$party->delete();
				//dpm($extparty);
				//dpm($party);
			}
    }
	else{
		//dpm($party);
	}		
  }
}

/**
 * Party merging function.
 * Parameters: master party object, merging party object that duplicates master party.
 */
function party_unique_merge($masterparty, $mergerparty) {
  $data_sets = party_get_party_data_sets($mergerparty);
	 //$data_sets = array_keys(db_select('party_attached_entity', 'ae')->fields('ae', array('entity_bundle'))->condition('pid', $mergerparty->pid, '=')->execute() ->fetchAllAssoc('entity_bundle'));
//dpm($data_sets);
	// Merging hats
	if(!isset($masterparty->party_hat['und']) OR !is_array($masterparty->party_hat['und'])) $masterparty->party_hat['und'] = array();
	if(!isset($mergerparty->party_hat['und']) OR !is_array($mergerparty->party_hat['und'])) $mergerparty->party_hat['und'] = array();
	$masterparty->party_hat['und'] = array_merge($masterparty->party_hat['und'], $mergerparty->party_hat['und']);
	
	$masterparty->save();
  if (count($data_sets)) {
    foreach ($data_sets as $data_set) {
      $mergercontroller = $mergerparty->getDataSetController($data_set);
      $ids = $mergercontroller->getEntityIds();
      if (count($ids)) {
        $mastercontroller = $masterparty->getDataSetController($data_set);
				$entity = $mergercontroller->getEntity();
				//dpm($entity);
				$mastercontroller->attachEntity($entity); 
				//$mergercontroller->detachEntity($entity);                
        $mastercontroller->save();
      }
    }
  }
  $mergerparty->merged_party = $masterparty->pid;
  $mergerparty->hidden = TRUE;
  
	return $mergerparty;
}
